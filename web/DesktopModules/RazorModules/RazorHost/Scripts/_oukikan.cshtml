@using System.Collections;
@using System.IO;
@using System.Collections.Generic;
@using System.Data.SqlClient;
@using DotNetNuke.Entities.Tabs;
@using System.Data;
@using System.Linq;
@using DotNetNuke.Common;
@using DotNetNuke.Entities.Users;
@using DotNetNuke.Web.Api;
@using DotNetNuke;
@using DotNetNuke.Services.Localization;
@using DotNetNuke.Entities.Modules;
@using DotNetNuke.Security.Permissions;
@using Yemon.dnn.BlocksContent;
@using AIS;
@{

    string link = "" + Request["m"];
    if (link == "")
    {
        return;
    }
    SqlCommand sql = new SqlCommand("SELECT * FROM[ais_meetings] WHERE SUBSTRING(LOWER(CAST(guid as VARCHAR(36))), 10, 9) = @link");
    sql.Parameters.AddWithValue("link", link);
    Meeting meeting = Yemon.dnn.DataMapping.ExecSqlFirst<Meeting>(sql);
    if (meeting == null)
    {
        return;
    }
  
    
    Club club = DataMapping.GetClub(meeting.cric);
    if (club == null)
    {
        return;
    }
    string blocksserial = "" + Yemon.dnn.Helpers.GetItem("blockscontent:" + meeting.guid);
    List<Block> blocks = new List<Block>();
    if (blocksserial != "")
    {
        blocks = (List<Block>)Yemon.dnn.Functions.Deserialize(blocksserial, typeof(List<Block>));
    }

    var libPath = TabController.CurrentPage.SkinPath + "echoppe/";
    PageData["appID"] = "app" + Dnn.Module.ModuleID;
    PageData["PortalId"] = Dnn.Portal.PortalId;
    PageData["moduleID"] = Dnn.Module.ModuleID;
    PageData["HTML"] = Html;

    PageData["blocksSuffix"] = "" + meeting.guid;
    var userInfo = UserController.Instance.GetCurrentUserInfo();

    var useridguid = "" + Request["useridguid"];
    if(useridguid=="")
    {
        if(userInfo.UserID>0)
        {
            useridguid = Yemon.dnn.Functions.CalculateMD5Hash(""+userInfo.UserID);
        }
        else
        {
            useridguid = Guid.NewGuid().ToString().Replace("-", "");
        }

    }

}
<div class="row">
    <div class="col-sm-6">
        <h1>@meeting.name</h1>
        <h2>@club.name</h2>
        @{
            if (meeting.statutory == Const.YES)
            {
                <p><em>R&eacute;union statutaire</em></p>
            }
        }

    </div>
    <div class="col-sm-6 text-right">
        <img src="/DesktopModules/AIS/API/Meeting/getqr?link=@meeting.link" />
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        @{
            if (meeting.dtstart.ToShortDateString() != meeting.dtend.ToShortDateString())
            {

                <p>du @meeting.dtstart.ToShortDateString() - @meeting.dtstart.ToString("HH:mm")</p>
                <p>@meeting.dtend.ToShortDateString() - @meeting.dtend.ToString("HH:mm")</p>

            }
            else
            {
                <p>le @meeting.dtstart.ToShortDateString() de  @meeting.dtstart.ToString("HH:mm") &agrave;  @meeting.dtend.ToString("HH:mm")</p>

            }
        }
    </div>

</div>
@RenderPage("BlocksContent/View.cshtml")

<style>
    [v-cloak] {
        display: none;
    }
</style>
<div id='@PageData["appID"]' v-cloak>
    <div>
        <h3>Inscriptions</h3>
    </div>
    <table class="table table-stripped">
        <tbody>
            <tr>
                <th>
                    <span v-if="users.length>0">{{nbparticipants()}} participant<span v-if="nbparticipants()>1">s</span> </span>
                    <span v-if="users.length==0">Aucun inscrit</span>
                </th>
                <th>
                    pr&eacute;sence
                </th>
                <th>
                    <span v-if="users.length>0">Commentaire</span>
                </th>
                <th>
                </th>
                <th>

                </th>
            </tr>
            <tr v-for="u in users">
                <td>{{u.firstname}} {{u.lastname}}</td>
                <td>{{u.presence=='N'?'Non':'Oui'}}</td>
                <td><p v-if="u.comment"><em>{{u.comment}}</em></p></td>
                <td><button v-if="isCurrentUser(u)" v-on:click="editUser(u)" type="button" class="btn btn-default">Modifier</button></td>
                <td><button v-if="isCurrentUser(u)" v-on:click="deleteUser(u)" type="button" class="btn btn-danger">Retirer</button></td>
            </tr>
        </tbody>
    </table>



    @if (meeting.active == Const.YES)
    {


    <div v-if="!user">
        <button v-if="isLoggedUser()" type="button" class="btn btn-success" v-on:click="addLoggedUser(true)">Je m'inscris</button>&nbsp;
        <button v-if="isLoggedUser()" type="button" class="btn btn-danger" v-on:click="addLoggedUser(false)">J'indique mon absence</button>&nbsp;
        <button type="button" class="btn btn-info" v-on:click="addNewUser()">Inscrire un participant</button>
    </div>

    }
    <div v-if="user" class="panel-group">
        <div class="panel panel-default">
            <div class="panel-heading">
                Inscription
            </div>
            <div class="panel-body">
                <label>Pr&eacute;nom</label> <input class="form-control" type="text" v-model="user.firstname" />
                <label>Nom</label> <input class="form-control" type="text" v-model="user.lastname" />
                <label>Pr&eacute;sent(e)</label> <div class="checkbox-inline"><label class="checkbox-inline"><input type="radio" value="Y" v-model="user.presence" /> Oui</label><label class="checkbox-inline"><input type="radio" value="N" v-model="user.presence" /> Non</label></div><br /><br />
                <label>Commentaire</label> <input class="form-control" type="text" v-model="user.comment" />
                <button type="button" class="btn btn-default" v-on:click="this.user=null">Annuler</button>&nbsp;
                <button v-if="isValid()" type="button" class="btn btn-primary" v-on:click="validNewUser()">Valider</button>
            </div>
        </div>

    </div>
    <script>
        function InitApp(appid, MODULEID, GUID, USERIDGUID) {
            const app = Vue.createApp({
                data() {
                    return {
                        moduleid: MODULEID,
                        meetingguid: GUID,
                        useridguid: USERIDGUID,
                        users: [],
                        user: null,
                        loggeduser: null
                    }
                },
                components: {

                },
                methods: {
                    nbparticipants() {
                        var nb = 0;
                        this.users.forEach(u => { if (u.presence == 'Y') nb++ });
                        return nb;
                    },

                    isValid() {
                        return this.user.firstname.trim() != '' && this.user.lastname.trim() != '';
                    },
                    getLoggedUser() {
                        _yemon[this.moduleid].service.getData('/GetLoggedUser',
                            {
                                useridguid: this.useridguid
                            },
                            (r) => {
                                if (r.data) {
                                    this.loggeduser = r.data;
                                }
                            });

                    },
                    getUsers() {
                        _yemon[this.moduleid].service.getData('/GetUsers',
                            {
                                guid: this.meetingguid
                            },
                            (r) => {
                                this.users = r.data;
                            });

                    },
                    validNewUser() {
                        _yemon[this.moduleid].service.postData('/SetUser',
                            {
                                user: JSON.stringify(this.user)
                            },
                            (r) => {
                                this.getUsers();
                                this.user = null;
                            });
                    },
                    addNewUser() {
                        this.user = {
                            guid: _yemon[this.moduleid].service.guid(),
                            meetingguid: this.meetingguid,
                            useridguid: this.useridguid,
                            firstname: '',
                            lastname: '',
                            comment: '',
                            presence: 'Y'

                        }

                    },
                    isCurrentUser(u) {
                        if (this.useridguid == u.useridguid)
                            return true;
                        return false;
                    },
                    editUser(u) {
                        this.user = JSON.parse(JSON.stringify(u));

                    },
                    addLoggedUser(presence) {
                        this.user = JSON.parse(JSON.stringify(this.loggeduser));
                        this.user.guid = _yemon[this.moduleid].service.guid();
                        this.user.meetingguid = this.meetingguid;
                        this.user.useridguid = this.useridguid;
                        this.user.presence = presence ? "Y" : "N";

                    },
                    isLoggedUser() {
                        let ok = this.loggeduser;
                        if (ok) {


                            for (let i = 0; i < this.users.length; i++) {
                                if (this.users[i].useridguid == this.useridguid) {
                                    return false;
                                }
                            }
                        }
                        return ok;
                    },
                    deleteUser(u) {
                        if (confirm("Retirer l'inscription ?")) {
                            _yemon[this.moduleid].service.getData('/DeleteUser',
                                {
                                    guid: u.guid,
                                    meetingguid: u.meetingguid
                                },
                                (r) => {
                                    this.getUsers();
                                });

                        }
                    }
                },
                mounted() {
                    this.getUsers();
                    this.getLoggedUser();
                    setInterval(() => {
                        this.getUsers()
                    }, 10000);
                }
            });
            app.mount('#' + appid);
        }
    </script>

    <script src="@(libPath)vue/3.2.23/vue.js"></script>
    <script src="@(libPath)axios/0.24.0/axios.min.js"></script>
    <script src="@(libPath)toastr/toastr.min.js"></script>
    <link href="@(libPath)toastr/toastr.min.css" rel="stylesheet" />
    <script src="/DesktopModules/Yemon/API/Services/VueJS"></script>
    <script>
    $(document).ready(function () {


        if (typeof _yemon == 'undefined')
            _yemon = [];
        _yemon[@PageData["moduleID"]] = new Yemon(@PageData["moduleID"], '/Desktopmodules/AIS/API/Meeting');
        InitApp('@PageData["appID"]',@PageData["moduleID"],'@meeting.guid','@useridguid');
    });
    </script>
