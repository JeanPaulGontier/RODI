@using AIS;
@using DotNetNuke.Entities.Users;
@{
    int cric = Functions.CurrentCric;
    var parametres = ComptaHelper.GetParametres(cric);
    var valeurs = ComptaHelper.GetDomaine("FacturesLignes");
}
<script type="text/x-template" id="compta-parametres-template">


    <div class="form-group form-inline">
        <div class="col-sm-3">Périodicité cotisation :</div>
        <div class="col-sm-4">
            <select v-model="parametres.cotisation" class="form-control">
                <option v-for="t in cotisationTypes">{{t.libelle}}</option>
            </select>
        </div>
        <div class="col-sm-5" v-if="parametres.cotisation=='Annuelle'">
            <span>Cotisation jour / mois : </span>
            <select v-model="parametres.jourCotisationAnnuelle" class="form-control" style="max-width:100px">
                <option v-for="t in 31">{{t}}</option>
            </select>
            <select v-model="parametres.moisCotisationAnnuelle" class="form-control" style="max-width:100px">
                <option v-for="t in 12">{{t}}</option>
            </select>

        </div>
    </div>
   
    <div class="pe-spacer size20" />
    <div class="form-group ">
        <div class="col-sm-3">Repas inclus :</div>
        <div class="col-sm-6">
            <label class="radio-inline"><input type="radio" name="repasinclus" v-model="parametres.repasInclus" :value="true"> Oui</label>
            <label class="radio-inline"><input type="radio" name="repasinclus" v-model="parametres.repasInclus" :value="false"> Non</label>
        </div>
    </div>
    <div class="pe-spacer size20" />
    <div class="form-group ">
        <div class="col-sm-6">
            <strong>Lignes factures de cotisations</strong>
        </div>
        <div class="col-sm-6 text-right">
            <button type="button" class="btn btn-default btn-sm" v-on:click="initFromParams">Restaurer les lignes par défaut</button>
        </div>
    </div>
    <div class="form-group ">
        <div class="col-sm-12">
            <div class="alert alert-info">
                Les lignes ci-dessous servent de gabarit à l'établissement des factures d'appels de cotisations pour les membres du club, il y a une abréviation spécifique pour le montant de la cotisation (MC). La ligne MC adapte automatiquement la quantité à la périodicité de cotisation (exemple : trimestre donne 3 dans la quantité, le montant est toujours indiqué au mois). Les abréviations sont affichées en en-tête du tableau d'appel de cotisation.
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            Abréviation
        </div>
        <div class="col-sm-2">
            Montant
        </div>
        <div class="col-sm-7">
            Libellé
        </div>
        <div class="col-sm-1">
        </div>
    </div>
    <div class="form-group" v-for="(v,i) in parametres.valeurs">
        <div class="col-sm-2">
            <input type="text" maxlength="3" v-model="v.val" class="form-control text-center" style="max-width:50px" />
        </div>
        <div class="col-sm-2">
            <input type="number" step="0.01" v-model="v.montant" class="form-control text-right" style="max-width:100px" />
        </div>
        <div class="col-sm-7">
            <input type="text" v-model="v.libelle" class="form-control" />
        </div>
        <div class="col-sm-1">
            <button type="button" class="btn btn-warning btn-xs" v-on:click="deleteLigne(i)"><i class="fa fa-trash-o"></i></button>
        </div>
    </div>
    <div class="form-group text-center">
        <button type="button" class="btn btn-primary" v-on:click="addLigne()"><i class="fa fa-plus"></i> Nouvelle ligne</button>
    </div>

    <div class="form-group row">
        <div class="col-sm-12">Pied de page facture :</div>
        <div class="col-sm-12">
            <tinymce :value="parametres.piedDePageFacture"
                     ref="editor"
                     v-on:change="onEditorChange()"
                     class="form-control"
                     :plugins="editorPlugins"
                     :toolbar1="editorToolbar"
                     :other="editorOptions" />

        </div>
    </div>
    <div class="pe-spacer size20" />
    <div class="text-center">
        <button type="button" v-on:click="setParametres()" v-if="modified" class="btn btn-primary">Enregistrer</button>
        <button type="button" v-if="!modified" class="btn btn-default disabled">Enregistrer</button>
    </div>
    @if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
    {

        <div class="form-group">
            @if (IsPost && (""+Request["bt_delete_compta"]).Equals("delete"))
            {
                <div class="pe-spacer size20" />

                    var msg = ComptaHelper.DeleteAllComptaDataFromClub(cric);

                    if (msg.Equals("success"))
                    {
                        <div class="alert alert-success">
                            Données correctement effacées
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            Erreur lors de l'effacement des données : @msg
                        </div>
                     }

            }
            <div class="pe-spacer size20" />
            <div class="alert alert-warning">
                <p>En tant que SuperUser vous pouvez effacer toutes les données comptables du club : </p>
                <p><button type="submit" name="bt_delete_compta" class="btn btn-warning btn-xs" value="delete" onclick="return(confirm('Effacer toutes les données comptables du club ?'))">Effacer toutes les données comptables du club</button></p>
            </div>
            <div class="pe-spacer size20" />            
        </div>
     
    }
</script>
<script>
    const ComptaParametres = {
        template: '#compta-parametres-template',
        name: 'ComptaParametres',
        props: {
            moduleid: Number,
            context: String
        },
        data: function () {
            return {
                cotisationTypes: @PageData["HTML"].Raw(Yemon.dnn.Functions.Serialize(ComptaHelper.GetDomaine("PeriodiciteCotisation"))),
                parametres: @PageData["HTML"].Raw(Yemon.dnn.Functions.Serialize(parametres)),
                valeurs: @PageData["HTML"].Raw(Yemon.dnn.Functions.Serialize(valeurs)),
                modified: null,

                editorPlugins: [
                    'autoresize advlist autolink lists link charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen',
                    'insertdatetime media table paste code directionality template textpattern'
                ],

                editorToolbar: 'undo redo | table | bold italic underline strikethrough blockquote | alignleft aligncenter alignright alignjustify | link | bullist numlist | removeformat',
                editorOptions: {
                    //height: 200,
                    relative_urls: false,
                    document_base_url: '/',
                    remove_script_host: false,
                    images_upload_url: this.serviceurl,
                    automatic_uploads: false,
                    menubar: false,
                    statusbar: false,
                    language: 'fr_FR',
                    table_toolbar: 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol',
                    setup: (editor) => {
                        editor.on('change keyup', () => {
                            // Récupère le contenu à chaque changement
                            //this.content = editor.getContent();

                            this.modified = true;
                        });
                    }
                },


            }
        },
        components: {
            'tinymce': VueEasyTinyMCE,

        },
        methods: {
            addLigne() {
                this.parametres.valeurs.push({
                    libelle: 'Nouvelle ligne',
                    val: 'L' + (this.parametres.valeurs.length+1),
                    montant: 0
                });
                this.modified = true;
            },
            deleteLigne(i) {
                if (confirm('Supprimer la ligne ?'))
                {
                    this.parametres.valeurs.splice(i, 1);
                    this.modified = true;
                }
            },
            initFromParams() {
                if (confirm("Remettre les paramètres par défaut ?")) {
                    this.parametres.valeurs = this.valeurs;
                    this.modified = true;
                }
            },
            onEditorChange(c) {
                alert(c);
            },
            setParametres() {
                this.parametres.piedDePageFacture = this.$refs.editor.objTinymce.getContent();
                _yemon[this.moduleid].service.postData("/SetParametres", {
                    context: this.context,
                    data: this.parametres
                }, (r) => {
                    this.modified = false;
                }, (e) => {
                    toastr["error"](e);
                });
            }
        },
        mounted() {

        },
        watch: {
            parametres: {
                handler() {
                    if (this.modified == null) {
                        this.modified = false;
                        return;
                    }
                    this.modified = true;
                },
                deep: true
            }
        },
    }
</script>
