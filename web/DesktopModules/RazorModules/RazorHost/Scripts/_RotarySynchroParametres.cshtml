@using AIS;
@using System.Diagnostics;
@using System.Data.SqlClient;
@using System.Data;


@{
    var param = new Rotary.Parametres();
    var item = Yemon.dnn.Helpers.GetItem("RotaryParametres", 0);
    bool saved = false;
    bool tested = false;
    bool called = false;
    string result = "";
    string collapse = "";
    string collapsed = "collapsed";

    int logid = 0;


    int nim = 0;
    int cric = 0;
    string clubtype = "Rotary%20Club";
    if (item != null)
    {
        param = Yemon.dnn.Functions.Deserialize<Rotary.Parametres>("" + item); ;
    }


    var logs = Yemon.dnn.DataMapping.ExecSql("SELECT [ScheduleHistoryID],[FriendlyName],[StartDate],[LogNotes]\r\n  FROM [ScheduleHistory] SH , [Schedule] S WHERE SH.ScheduleID=S.ScheduleID AND S.FriendlyName LIKE '%RotaryScheduler%'   ORDER BY StartDate DESC");


    DotNetNuke.Security.Roles.RoleController roleController = new DotNetNuke.Security.Roles.RoleController();
    var admins = roleController.GetUsersByRole(Dnn.Portal.PortalId, Const.ROLE_ADMIN_DISTRICT);

    if (IsPost)
    {
        int.TryParse("" + Request["LogSelect"], out logid);
        int.TryParse("" + Request["nim"], out nim);
        int.TryParse("" + Request["cric"], out cric);
        clubtype = "" + Request["clubtype"];
        if (("" + Request["bt_logview"]) == "logview")
        {

            foreach(DataRow row in  logs.Rows)
            {
                if((int)row["ScheduleHistoryID"]==logid)
                {
                    result = "" + row["LogNotes"];
                    break;
                }
            }
          
            called = true;
        }
        if (("" + Request["bt_ucm"]) == "ucm")
        {
            result = RotaryHelper.UpdateClubsMembers();

            called = true;
        }
        if (("" + Request["bt_uco"]) == "uco")
        {
            result = RotaryHelper.UpdateClubsOfficers();

            called = true;
        }
        if (("" + Request["bt_forceump"]) == "force_ump")
        {
            result = RotaryHelper.ForceUmpAllProfiles();

            called = true;
        }
        if (("" + Request["bt_get_clubs"]) == "get_clubs")
        {
            List<Rotary.Club>clubs = RotaryHelper.Get_Clubs(out result);
            if(clubs==null)
            {
                result = "Erreur récupération clubs";
            }
            else
            {
                result = "<pre>" + Functions.JSONFormat(result) + "</pre>";
            }

            called = true;
        }
        if (("" + Request["bt_get_club_members"]) == "get_club_members_active")
        {
            var members = RotaryHelper.Get_Club_Members_Active(clubtype, cric,out result);
            if (members == null)
            {
                result = "Erreur récupération membres";
            }
            else
            {
                result = "<pre>" + Functions.JSONFormat(result) + "</pre>";
            }

            called = true;
        }
        if (("" + Request["bt_get_club_members"]) == "get_club_members_terminated")
        {
            var members = RotaryHelper.Get_Club_Members(clubtype, cric, "terminated",out result);
            if (members == null)
            {
                result = "Erreur récupération membres";
            }
            else
            {
                result = "<pre>" + Functions.JSONFormat(result) + "</pre>";
            }
            called = true;
        }
        if (("" + Request["bt_get_club_members"]) == "get_club_member_profile")
        {
            Rotary.Profile member = RotaryHelper.Get_Member_Profile(nim,out result);
            if (member == null)
            {
                result = "Erreur récupération membres";
            }
            else
            {
                result = "<pre>" + Functions.JSONFormat(result) + "</pre>";
            }
            called = true;
        }
        if (("" + Request["bt_get_club_members"]) == "get_club_officers")
        {


            List<Rotary.Club.Officer> member = RotaryHelper.Get_Club_Officers(cric,clubtype,out result);
            if (member == null)
            {
                result = "Erreur récupération membres";
            }
            else
            {
                result = "<pre>" + Functions.JSONFormat(result) + "</pre>";
            }
            called = true;
        }
    }


    if (IsPost)
    {


        if (("" + Request["bt_save"]) == "save")
        {
            collapse = "in";
            collapsed = "";
            param.url_api = "" + Request["url_api"];
            param.api_username = "" + Request["api_username"];


            if (("" + Request["api_password"]) != "++++++++++")
            {
                param.api_password = "" + Request["api_password"];
            }


            Yemon.dnn.Helpers.SetItem("RotaryParametres", Yemon.dnn.Functions.Serialize(param), "", keephistory: false);
            saved = true;

        }
        if (("" + Request["bt_test_auth"]) == "test_auth")
        {
            collapse = "in";
            collapsed = "";
            result = RotaryHelper.Test_Auth();
            tested = true;
        }

    }
}
<style>
    .panel-heading .accordion-toggle:after {
        /* symbol for "opening" panels */
        font-family: 'Glyphicons Halflings'; /* essential for enabling glyphicon */
        content: "\e114"; /* adjust as needed, taken from bootstrap.css */
        float: right; /* adjust as needed */
        color: grey; /* adjust as needed */
    }

    .panel-heading .accordion-toggle.collapsed:after {
        /* symbol for "collapsed" panels */
        content: "\e080"; /* adjust as needed, taken from bootstrap.css */
    }
</style>
<div class="panel-group" id="accordion">
    <div class="panel panel-default">
        <div class="panel-heading"><a class="accordion-toggle @collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapse1">API Rotary International</a></div>
        <div id="collapse1" class="panel-collapse collapse @collapse">
            <div class="panel-body">


                <div class="form-group">
                    <label for="jwt_url_login">URL Api</label>
                    <input type="text" class="form-control" name="url_api" value="@param.url_api" />
                </div>
                <div class="form-group">
                    <label for="jwt_username">API Username</label>
                    <input type="text" class="form-control" name="api_username" value="@param.api_username" />
                </div>
                <div class="form-group">
                    <label for="jwt_password">API Password</label>
                    <input type="password" class="form-control" name="api_password" value="++++++++++" />
                </div>


                <div class="from-group">
                    <button type="submit" name="bt_save" value="save" class="btn btn-primary">Valider</button>&nbsp;
                    <button type="submit" name="bt_test_auth" value="test_auth" class="btn btn-secondary">Test Authentification</button>&nbsp;
                </div>



                @{
                    if (saved)
                    {
                        <div class="pe-spacer size10"></div>
                        <div class="alert alert-success">Paramètres enregistrés</div>
                    }
                    if (tested)
                    {
                        <div class="pe-spacer size10"></div>
                        if (result.StartsWith("Erreur"))
                        {
                            <div class="alert alert-danger">@result</div>

                        }
                        else
                        {
                            <div class="alert alert-success">@result</div>

                        }
                    }
                }

            </div>
       </div>
        </div>


        <div class="panel panel-default">
            <div class="panel-heading">Diagnotics & Mises à jours</div>
            <div class="panel-body">
                <div>
                    <fieldset>
                        <legend>Mise à jour base de données locale avec données reçues du RI</legend>

                        <div>
                            <button type="submit" name="bt_ucm" value="ucm" class="btn btn-primary" title="ATTENTION : mets à jour la base de données">Mise à jour membres des clubs</button>
                            <button type="submit" name="bt_uco" value="uco" class="btn btn-primary" title="ATTENTION : mets à jour la base de données">Mise à jour officers des clubs</button>
                            <button type="submit" name="bt_forceump" value="force_ump" class="btn btn-warning" title="ATTENTION : mets à jour la base de données">Forcer maj tous les membres</button>

                        </div>
                    </fieldset>
                    <div class="pe-spacer size20"></div>
                    <fieldset>
                        <legend>Journaux d'exécution tâches planifiées</legend>

                        <div class="form-inline form-group-sm">
                            <select name="LogSelect" class="form-control" style="width:50%">
                                @foreach (DataRow row in logs.Rows)
                                {

                                    if ((int)row["ScheduleHistoryID"] == logid)
                                    {
                                        <option selected value='@row["ScheduleHistoryID"]'>@(((DateTime)row["StartDate"]).ToString("dd/MM/yyyy HH:MM:ss")) - @row["FriendlyName"]</option>

                                    }
                                    else
                                    {
                                        <option value='@row["ScheduleHistoryID"]'>@(((DateTime)row["StartDate"]).ToString("dd/MM/yyyy HH:MM:ss")) - @row["FriendlyName"]</option>

                                    }
                                }
                            </select>
                            <button type="submit" name="bt_logview" value="logview" class="btn btn-primary">Voir</button>
                        </div>
                    </fieldset>
                    <div class="pe-spacer size20"></div>
                    <fieldset>
                        <legend>Analyse instantanée des données reçues du RI, sans mise à jour de la base de données locale</legend>
                        <div>
                            <button type="submit" name="bt_get_clubs" value="get_clubs" class="btn btn-secondary">Récupération Clubs</button>
                        </div>
                        <div class="pe-spacer size20"></div>
                        <div class="form-group form-inline">
                            <label>Cric</label>
                            <input type="number" name="cric" class="form-control small" value="@cric" />
                            <label>Type de club</label>
                            <select name="clubtype" class="form-control">

                                @if (clubtype == "Rotary%20Club")
                                {
                                    <option value="Rotary%20Club" selected>Rotary</option>
                                    <option value="Rotaract%20Club">Rotaract</option>
                                }
                                else
                                {
                                    <option value="Rotary%20Club">Rotary</option>
                                    <option value="Rotaract%20Club" selected>Rotaract</option>

                                }

                            </select><br />

                            <button type="submit" name="bt_get_club_members" value="get_club_members_active" class="btn btn-secondary">Récupération Membres Actifs</button>&nbsp;
                            <button type="submit" name="bt_get_club_members" value="get_club_members_terminated" class="btn btn-secondary">Récupération Membres Terminés</button>&nbsp;
                            <button type="submit" name="bt_get_club_members" value="get_club_officers" class="btn btn-secondary">Récupération Club Officers</button>&nbsp;
                        </div>

                        <div class="pe-spacer size20"></div>
                        <div class="form-group form-inline">
                            <label>Nim</label>
                            <input type="number" name="nim" class="form-control" value="@nim" /> &nbsp; <button type="submit" name="bt_get_club_members" value="get_club_member_profile" class="btn btn-secondary">Récupération Profil Membre</button>
                        </div>

                    </fieldset>

                    @{

                        if (called)
                        {
                            <div class="pe-spacer size10"></div>
                            if (result.StartsWith("Erreur"))
                            {
                                <div class="alert alert-danger">@Html.Raw(result)</div>

                            }
                            else
                            {
                                <div class="alert alert-success">@Html.Raw(result)</div>

                            }
                        }
                    }
                </div>

            </div>

        </div>
        @{
            var clubsok = Yemon.dnn.DataMapping.ExecSql<Rotary.Club>(new SqlCommand("select * from ais_ri_club order by ClubName"));
            var clubsd = DataMapping.ListClubs().OrderBy(c => c.name).ToList();
            var clubsko = new List<Club>();
            foreach (var c in clubsd)
            {
                var club = clubsok.Find(cc => cc.ClubId == c.cric);
                if (club == null)
                {
                    clubsko.Add(c);
                }

            }
        }
        <div class="panel panel-default">
            <div class="panel-heading">Clubs de la base de données locale</div>
            <div class="panel-body">
                <h3>Clubs qui ont autorisé RODI sur rotary.org</h3>
                <ul class="alert alert-success">
                    @foreach (var c in clubsok)
                    {

                        <li>@c.ClubId : @c.ClubType @c.ClubName</li>
                    }
                </ul>
                <h3>Clubs qui n'ont pas autorisé RODI sur rotary.org</h3>
                @if (Const.CLUB_SATELLITE_APART)
                {
                    <div class="alert alert-info">
                        Le district gère les clubs satellites à part des clubs parents, il n'est pas nécessaire pour les clubs satellites d'autoriser la synchronisation car elle dépend des clubs parents
                    </div>
                }
                <ul class="alert alert-warning">
                    @foreach (var c in clubsko)
                    {

                        <li>@c.cric : @c.club_type @c.name</li>
                    }
                </ul>
            </div>
        </div>
    </div>


