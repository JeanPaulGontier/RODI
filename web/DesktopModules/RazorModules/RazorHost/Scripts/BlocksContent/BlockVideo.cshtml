<script type="text/x-template" id="blockvideo-template">
    <div v-if="c">
        <div v-if="editing" class="bc-editing">
            <button type="button" v-on:click="cancel()" class="btn btn-close"><i class="fa fa-times"></i></button>
            <span class="bc-label">Titre :</span>
            <input type="text" v-model="e.Title" class="form-control" />
            <span class="bc-label">URL vidéo Youtube :</span>

            <input type="text" v-model="e.Url" rows="4" class="form-control" />
            <em class="small">Pour récupérer l'url d'une vidéo Youtube, cliquez sur partager puis Copier, ensuite collez la dans le champ ci-dessous</em>

            <div style="text-align:center;margin-top:1em;">
                <button type="button" v-on:click="validate()" class="btn btn-success">Valider</button>
            </div>
        </div>
        <div v-if="!editing">
            <h3>{{c.Title}}</h3>
            <div ref="videoContainer">
                <iframe width="100%" ref="videoIFrame" class="video" :src="c.Url" allowfullscreen=""></iframe>
            </div>

        </div>
    </div>
</script>
<script>
    let BlockVideo =  {
        template: '#blockvideo-template',
        name: 'BlockVideo',
        props: [
            'content'
        ],
        emits: [
            'changed',
            'cancel'
        ],
        data() {
            return {
                editing: false,
                c: {

                },
                fichiers: [],
                e: {

                },



            }
        },
        components: {

        },
        methods: {
            edit() {
                this.editing = true;
                this.e = JSON.parse(JSON.stringify(this.c));
            },
            validate() {
                if (this.e.Url.startsWith('https://youtu.be/')) {
                    this.e.Url= this.e.Url.replace('https://youtu.be/','https://www.youtube.com/embed/');
                }
                this.c = JSON.parse(JSON.stringify(this.e));
                this.editing = false;
                this.onChange();
            },
            cancel() {
                this.editing = false;
                this.$emit('cancel');
            },
            onChange() {
                this.$emit('changed', this.c);
                this.$nextTick(() => {
                    this.resizevideo();
                });
            },

            resizevideo() {
                var ratio = 16 / 9;
                const videoIFrame = this.$refs.videoIFrame;
                const videoContainer = this.$refs.videoContainer;
                var width = Math.min(window.innerWidth, videoIFrame.offsetWidth);
                videoIFrame.style.height= Math.ceil(width / ratio) + "px";
                videoContainer.style.height = (width / ratio) + "px";              
            }                
        },
        mounted() {
            window.addEventListener('resize', this.resizevideo);
            this.resizevideo();
            this.c = this.content;
        },
         unmounted() {
            window.removeEventListener('resize', this.getDimensions);
        },
     }


</script>