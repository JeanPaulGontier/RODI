
<script type="text/x-template" id="blockimagecollection-template">
    <a ref="top"></a>
    <div v-if="c">
        <div v-if="editing" class="bc-editing">
            <button type="button" v-on:click="cancel()" class="btn btn-close"><i class="fa fa-times"></i></button>
            <div class="row">
                <span>Titre :</span>
                <input type="text" v-model="e.Title" class="form-control" />
            </div>
            <div>
                <input class="input-file" type="file" ref="document" v-on:change="onChangeDocumentUpload()" style="display:none" multiple>
                <div v-if="e.Images" v-for="(i,index) in e.Images" class="row">
                    <div class="col-sm-4">
                        <img :src="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid='+i.GUID" />

                    </div>
                    <div class="col-sm-8">
                        <span> Légende :</span>
                        <input type="text" v-model="i.Name" class="form-control" /><br />
                        <button type="button" v-on:click="deleteImage(index)" class="btn btn-sm btn-danger">Supprimer Photo</button>&nbsp;
                        <button type="button" v-on:click="upFirst(index)" v-if="index>0" class="btn btn-sm btn-default" title="Tout en haut"><i class="fa fa-angle-double-up"></i></button>
                        <button type="button" v-on:click="up(index)" v-if="index>0" class="btn btn-sm btn-default" title="Monter"><i class="fa fa-angle-up"></i></button>
                        <button type="button" v-on:click="down(index)" v-if="index<e.Images.length-1" class="btn btn-sm btn-default" title="Descendre"><i class="fa fa-angle-down"></i></button>
                        <button type="button" v-on:click="downLast(index)" v-if="index<e.Images.length-1" class="btn btn-sm btn-default" title="Tout en bas"><i class="fa fa-angle-double-down"></i></button>
                        <hr/>
                    </div>
                    <div class="col-sm-12 pe-spacer size10"></div>
                </div>
                <div v-if="uploading()">
                    <img src="/images/spinner.gif" /> Envoi en cours
                </div>
                <br />
                <button type="button" v-if="!uploading()" class="btn btn-primary" v-on:click="addDocument">Choisir une ou plusieurs photo(s)</button><br />
                <em class="text-info">Les fichiers doivent être des photos et ne doivent pas dépasser 28 Mo<br />(si vous choisissez un fichier PDF, la 1ere page est convertie automatiquement en photo)</em><br />
            </div>
         
            <div style="text-align:center;margin-top:1em;">
                <button type="button" v-on:click="validate()" class="btn btn-success">Valider</button>
            </div>
        </div>
        <div v-if="!editing">
            <h2>{{c.Title}}</h2>

            <div class="Lrow" v-if="!c.Type">
                <img v-for="i in c.Images" :src="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid='+i.GUID" :title="i.Name" />
            </div>
        </div>
    </div>
</script>
<script>
    if (typeof BlockImageCollection == 'undefined') {
        BlockImageCollection = {
           template: '#blockimagecollection-template',
           name: 'BlockImageCollection',
           props: [
                'content', 'moduleid', 'guid'
            ],
            emits: [
                'changed',
                'cancel'
            ],
            data() {
                return {
                    editing: false,
                    c: {},
                    nbuploaded: 0,
                    width: 0,
                    pct: 100,
                    fichiers: [],
                    e: {
                        Images: []
                    },
                    lastY: window.screenY                    
                }
            },
            methods: {
                nbup() {
                    var nb = 0;
                    this.fichiers.forEach(f => {
                        if (f.uploaded) nb++;
                    });
                    this.nbuploaded = nb;
                    return nb;
                },
                uploading() {
                    var u = this.fichiers.length > 0 && this.nbup() < this.fichiers.length;

                    if (!u && this.$refs.document)
                        this.$refs.document.value = null;
                    return u;
                },
                upFirst(i) {
                    const b = this.e.Images.splice(i, 1)[0];
                    this.e.Images.splice(0, 0, b);
                },
                up(i) {
                    const b = this.e.Images.splice(i, 1)[0];
                    this.e.Images.splice(i - 1, 0, b);
                },
                down(i) {
                    const b = this.e.Images.splice(i, 1)[0];
                    this.e.Images.splice(i + 1, 0, b);
                },
                downLast(i) {
                    const b = this.e.Images.splice(i, 1)[0];
                    this.e.Images.push(b);
                },
                getColumnStyle() {
                    return 'flex:' + this.pct + '%;max-width:' + this.pct + '%;';
                },                
                edit() {
                    this.lastY = window.scrollY;
                    this.editing = true;
                    this.e = JSON.parse(JSON.stringify(this.c));
                },
                validate() {
                    window.scrollTo(window.scrollX, this.lastY);

                    this.c = JSON.parse(JSON.stringify(this.e));
                    this.editing = false;

                    
                    this.onChange();

                },
                cancel() {
                    this.editing = false;
                
                    this.$emit('cancel');
                },
                onChange() {
                    this.$emit('changed', this.c);
                },
                deleteImage(i) {
                    this.e.Images.splice(i, 1);
                },
                addDocument(event) {
                    event.preventDefault();

                    this.$refs.document.click();
                },
                onChangeDocumentUpload() {
                    this.fichiers = [];
                    if (this.$refs.document.files.length == 0)
                        return;

                    for (var i = 0; i < this.$refs.document.files.length; i++) {
                        this.fichiers.push({
                            file: this.$refs.document.files[i],
                            uploaded: false
                        });
                    }

                    this.uploadMedia({
                        type: 'photo'
                    }, this.onDocumentUploaded, (r) => { alert('une erreur est survenue, veuillez re-tenter ou nous contacter') });
                },
                onDocumentUploaded(r) {
                    const image = r.data;
                    image.Name = image.Filename;
                    this.e.Images.push(image);

                    this.fichiers.forEach(f => {
                        if (f.file.name == image.Filename) {
                            f.uploaded = true;
                        };
                    });
                },
                uploadMedia(meta, callbackok, callbackerror) {
                    this.fichiers.forEach(fichier => {
                        if (fichier.file.size > 28 * 1024 * 1024) {
                            alert('Le fichier est trop gros, taille maximum 28 Mo, veuillez re-tenter avec un fichier plus petit ou nous contacter');
                            this.fichiers = [];
                            return;
                        }
                        let formData = new FormData();
                        formData.append('file', fichier.file);
                        formData.append('allowPdf2Image', true);

                        if (meta) {
                            for (let p in meta) {
                                formData.append(p, meta[p]);
                            }
                        }
                        _yemon[this.moduleid].service.postFile('/setMedia',
                            formData,
                            (r) => callbackok(r),
                            (r) => callbackerror(r)
                        );
                    });
                }
            },           
            mounted() {
                this.c = this.content;
            },

        }
    }

</script>
