<script type="text/x-template" id="blockseditor-template">
    <div v-for="(b,index) in blocks" v-if="blocks" :class="{'bc-dotted': editable}">
        <div class="bc-buttonBar" v-if="editing==-1 && editable">
            <button type="button" v-on:click="deleteBlock(index)" class="btn btn-xs btn-warning" title="Supprimer"><i class="fa fa-trash-o"></i></button>
            <button type="button" v-if="index>0" v-on:click="firstBlock(index)" class="btn btn-default btn-xs" title="Tout en haut"><i class="fa fa-angle-double-up"></i></button>
            <button type="button" v-if="index>0" v-on:click="upBlock(index)" class="btn btn-default btn-xs" title="Monter"><i class="fa fa-angle-up"></i></button>
            <button type="button" v-if="index<blocks.length-1" v-on:click="downBlock(index)" class="btn btn-default btn-xs" title="Descendre"><i class="fa fa-angle-down"></i></button>
            <button type="button" v-if="index<blocks.length-1" v-on:click="lastBlock(index)" class="btn btn-default btn-xs" title="Tout en bas"><i class="fa fa-angle-double-down"></i></button>
            <button type="button" v-on:click="editBlock(index)" class="btn btn-info btn-xs">Editer</button>
        </div>

        <component :ref="b.Guid"
                   :key="b.Guid"
                   :guid="b.Guid"
                   :is="'Block'+b.Type"
                   :moduleid="moduleid"
                   :content="b.Content"
                   v-on:changed="blockChanged(index,$event)"
                   v-on:cancel="blockCancel()">
        </component>

    </div>
    <div v-if="!adding && editable" style="text-align:center">
        <button type="button" class="btn btn-info" v-on:click="adding=true">Ajouter un bloc</button>
    </div>
    <div v-if="adding && editable" class="bc-editing" v-show="editable">
        <h3>Choisir le type de bloc à ajouter</h3>
        <button type="button" v-on:click="adding=false" class="btn btn-close"><i class="fa fa-times"></i></button>
        <div class="bc-buttonBar">
            <button type="button" class="btn btn-primary" v-on:click="addBlock('NewsClub')">Nouvelles du club</button>
            <button type="button" class="btn btn-primary" v-on:click="addBlock('ImageText')">Photo & Texte</button>
            <button type="button" class="btn btn-primary" v-on:click="addBlock('FileCollection')">Liste de documents</button>
            <button type="button" class="btn btn-primary" v-on:click="addBlock('ImageCollection')">Liste d'images</button>
            <button type="button" class="btn btn-primary" v-on:click="addBlock('Video')">Vidéo</button>
            <button type="button" class="btn btn-primary" v-on:click="addBlock('Raw')">Contenu HTML</button>

        </div>
    </div>
</script>

<script>

    if (typeof BlocksEditor == 'undefined') {
        BlocksEditor = {
            template: '#blockseditor-template',
            name: 'BlocksEditor',
            props: [
                'store', 'blocks', 'moduleid', 'editable'
            ],
            emits: [
                'changed'
            ],
            components: {
                BlockImageText, BlockImageCollection, BlockFileCollection, BlockRaw, BlockVideo, BlockNewsClub
            },
            data() {
                return {
                    adding: false,
                    editing: -1,
                    start: true
                }
            },
            methods: {
                addBlock(type) {
                    if (!this.blocks)
                        this.blocks = [];
                    switch (type) {
                        case 'ImageText':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Title: '', Position: 'H' } });
                            break
                        case 'FileCollection':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Title: '', Files: [] } });
                            break;
                        case 'ImageCollection':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Title: '', Images: [] } });
                            break;
                        case 'Raw':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Html: '' } });
                            break;
                        case 'Video':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Title: '', Type: 'youtube', Url: '' } });
                            break;

                        case 'NewsClub':
                            this.blocks.push({ Guid: _yemon[this.moduleid].service.guid(), Type: type, Content: { Title: '', NbToShow:1, DateBehavior:'future', ShowImage:true, ShowTitle:true,ShowDate:true } });
                            break;


                    }
                    this.adding = false;
                    this.$nextTick(()=>this.editBlock(this.blocks.length - 1));
                },
                editBlock(i) {
                    this.editing = i;
                    this.$refs[this.blocks[i].Guid].edit();
                },
                deleteBlock(i) {
                    if (confirm('Supprimer le bloc ?')) {
                        this.blocks.splice(i, 1);
                        this.blocks = JSON.parse(JSON.stringify(this.blocks));
                        this.onChange();
                    }
                },
                firstBlock(i) {
                    const b = this.blocks.splice(i, 1)[0];
                    this.blocks.splice(0, 0, b);
                    this.onChange();
                },
                upBlock(i) {
                    const b = this.blocks.splice(i, 1)[0];
                    this.blocks.splice(i - 1, 0, b);
                    this.onChange();
                },
                downBlock(i) {
                    const b = this.blocks.splice(i, 1)[0];
                    this.blocks.splice(i + 1, 0, b);
                    this.onChange();
                },
                lastBlock(i) {
                    const b = this.blocks.splice(i, 1)[0];
                    this.blocks.push(b);
                    this.onChange();
                },
                blockChanged(i, e) {
                    this.blocks[i].Content = e;
                    this.onChange();
                },
                blockCancel() {
                    this.editing = -1;
                },
                onChange() {
                    this.editing = -1;
                    //this.$emit('changed', this.blocks);


                    this.store.changed();
                }

            },
            mounted() {

                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                };


            },
            //watch: {
            //    blocks: {
            //        deep: true,

            //        handler() {
            //            if (this.start) {
            //                this.start = false;
            //                return;
            //            }
            //            this.onChange();
            //        }
            //    },

            //}
        }
    }

</script>