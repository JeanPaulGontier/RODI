<script type="text/x-template" id="blockfilecollection-template">
    <div v-if="c">
        <div v-if="editing" class="bc-editing">
            <button type="button" v-on:click="cancel()" class="btn btn-close"><i class="fa fa-times"></i></button>
            <span class="bc-label">Titre :</span>
            <input type="text" v-model="e.Title" class="form-control" />
            <div>
                <input class="input-file" type="file" ref="document" v-on:change="onChangeDocumentUpload()" style="display:none" multiple>
                <div v-if="e.Files" v-for="(i,index) in e.Files">
                    Nom affiché : <input type="text" v-model="i.Name" style="width:50%" />&nbsp;
                    <a :href="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid='+i.GUID+'&noattach=true'" class="btn btn-link" target="_blank"><i class="fa fa-eye" aria-hidden="true"> Ouvrir</i></a>&nbsp;
                    <a :href="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid='+i.GUID" class="btn btn-link" target="_blank"><i class="fa fa-download" aria-hidden="true"> Télécharger</i></a>&nbsp;
                    <button type="button" v-on:click="deleteFile(index)" class="btn btn-sm btn-danger" title="Supprimer"><i class="fa fa-trash-o"></i></button>&nbsp;
                    <button type="button" v-on:click="upFirst(index)" v-if="index>0" class="btn btn-sm btn-default" title="Tout en haut"><i class="fa fa-angle-double-up"></i></button>
                    <button type="button" v-on:click="up(index)" v-if="index>0" class="btn btn-sm btn-default" title="Monter"><i class="fa fa-angle-up"></i></button>
                    <button type="button" v-on:click="down(index)" v-if="index<e.Files.length-1" class="btn btn-sm btn-default" title="Descendre"><i class="fa fa-angle-down"></i></button>
                    <button type="button" v-on:click="downLast(index)" v-if="index<e.Files.length-1" class="btn btn-sm btn-default" title="Tout en bas"><i class="fa fa-angle-double-down"></i></button> 
                    <hr/>
                </div>
                <div v-if="uploading()">
                    <img src="/images/spinner.gif" /> Envoi en cours
                </div>
                <br />
                <button type="button" v-if="!uploading()" class="btn btn-primary" v-on:click="addDocument">Choisir un fichier ou plusieurs fichier(s)</button><br />
                <em class="stxt">Les fichiers ne doivent pas dépasser 28 Mo</em><br />
            </div>
            <div style="text-align:center;margin-top:1em;">
                <button type="button" v-on:click="validate()" class="btn btn-success">Valider</button>
            </div>
        </div>
        <div v-if="!editing">
            <h2>{{c.Title}}</h2>
            <div v-if="c.Files" v-for="i in c.Files"><a :href="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid=' + i.GUID+ '&noattach=true'" class="btn btn-link" target="_blank">{{i.Name}}</a>&nbsp;<a :href="'/DesktopModules/BlocksContent/API/Blocks/getMedia?guid=' + i.GUID " title="Télécharger" class="btn btn-link" target="_blank"><i class="fa fa-download" aria-hidden="true"></i></a></div>          

        </div>
    </div>
</script>
<script>
    if (typeof BlockFileCollection == 'undefined') {

        BlockFileCollection = {
            template: '#blockfilecollection-template',
            name: 'BlockFileCollection',
            props: [
                'content', 'moduleid'
            ],
            emits: [
                'changed',
                'cancel'
            ],
            data() {
                return {
                    editing: false,
                    c: {},
                    nbuploaded: 0,
                    fichiers: [],
                    e: {},
                }
            },
            methods: {   
                nbup() {
                    var nb = 0;
                    this.fichiers.forEach(f => {
                        if (f.uploaded) nb++;
                    });
                    this.nbuploaded = nb;
                    return nb;
                },
                uploading() {
                    var u = this.fichiers.length > 0 && this.nbup() < this.fichiers.length;

                    if (!u && this.$refs.document)
                        this.$refs.document.value = null;
                    return u;
                },
                upFirst(i) {
                    const b = this.e.Files.splice(i, 1)[0];
                    this.e.Files.splice(0, 0, b);
                },
                up(i) {
                    const b = this.e.Files.splice(i, 1)[0];
                    this.e.Files.splice(i - 1, 0, b);
                },
                down(i) {
                    const b = this.e.Files.splice(i, 1)[0];
                    this.e.Files.splice(i + 1, 0, b);
                },
                downLast(i) {
                    const b = this.e.Files.splice(i, 1)[0];
                    this.e.Files.push(b);
                },
                edit() {
                    this.editing = true;
                    this.e = JSON.parse(JSON.stringify(this.c));
                },
                validate() {
                    this.c = JSON.parse(JSON.stringify(this.e));
                    this.editing = false;
                    this.onChange();
                },
                cancel() {
                    this.editing = false;
                    this.$emit('cancel');
                },
                onChange() {
                    this.$emit('changed', this.c);
                },
                deleteFile(i) {
                    this.e.Files.splice(i, 1);
                },
                addDocument(event) {
                    event.preventDefault();
                    this.$refs.document.click();
                },
                onChangeDocumentUpload() {
                    this.fichiers = [];
                    if (this.$refs.document.files.length == 0)
                        return;

                    for (var i = 0; i < this.$refs.document.files.length; i++) {
                        this.fichiers.push({
                            file: this.$refs.document.files[i],
                            uploaded: false
                        });
                    }

                    this.uploadMedia({
                        type: 'document'
                    }, this.onDocumentUploaded, (r) => { alert('une erreur est survenue, veuillez re-tenter ou nous contacter') });
                },
                onDocumentUploaded(r) {
                    const file = r.data;
                    file.Name = file.Filename;
                    this.e.Files.push(file);

                    this.fichiers.forEach(f => {
                        if (f.file.name == file.Name) {
                            f.uploaded = true;
                        };
                    });
                },
                uploadMedia(meta, callbackok, callbackerror) {
                    this.fichiers.forEach(fichier => {
                        if (fichier.file.size > 28 * 1024 * 1024) {
                            alert('Le fichier est trop gros, taille maximum 28 Mo, veuillez re-tenter avec un fichier plus petit ou nous contacter');
                            this.fichiers = [];
                            return;
                        }
                        let formData = new FormData();
                        formData.append('file', fichier.file);
                        if (meta) {
                            for (let p in meta) {
                                formData.append(p, meta[p]);
                            }
                        }
                        _yemon[this.moduleid].service.postFile('/setMedia',
                            formData,
                            (r) => callbackok(r),
                            (r) => callbackerror(r)
                        );
                    });

                },
            },
            mounted() {
                this.c = this.content;
            }
        }
    }

</script>