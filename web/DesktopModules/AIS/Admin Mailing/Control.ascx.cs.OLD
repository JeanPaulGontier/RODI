using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DotNetNuke.Entities.Modules;
using System.IO;
using System.Drawing;
using Telerik.Web.UI;
using DotNetNuke.Security.Roles;
using DotNetNuke.Entities.Users;
using AIS;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using DotNetNuke.Common.Utilities;


public partial class DesktopModules_AIS_Admin_Mailing_Control : PortalModuleBase
{
    string param = "";
    protected void Page_Load(object sender, EventArgs e)
    {
        if ("" + Functions.CurrentCric != HF_Cric.Value)
        {
            HF_Cric.Value = "" + Functions.CurrentCric;
            GridView1.PageIndex = 0;
            Panel1.Visible = true;
            Panel2.Visible = false;
            Panel_Envoi.Visible = false;
        }

        int annee_0 = Functions.GetAnneeRotarienne();

        // Membre du DISTRICT
        UserInfo ui = PortalSettings.UserInfo;
        if ((ui.IsInRole(Const.ROLE_ADMIN_DISTRICT) == true || ui.IsInRole(Const.ROLE_ADMIN_ROTARACT) == true) && Functions.CurrentCric == 0)
        {
            Panel_District.Visible = true;
                        
            if (IsPostBack == false)
            {
                // Peuplement des roles
                RoleController ObjRoleController = new RoleController();
                var arrRoles = ObjRoleController.GetRoles();
                foreach (RoleInfo c in arrRoles)
                {
                    if (c.RoleID > 4)
                    {
                        CHKList_Role.Items.Add(new ListItem(c.RoleName, c.RoleName));
                    }
                }

                // Peuplement des fonctions
                List<string> liste_Fonctions = DataMapping.GetFonctions();
                foreach (string s in liste_Fonctions)
                {
                    CHKList_Fct.Items.Add(new ListItem(s, s));
                }

                // Peuplement des années rotariennes
                CHK_AR_0.Text = annee_0.ToString();                
                CHK_AR_1.Text = (annee_0 + 1).ToString();

                // Peuplement du filtre departemental
                List<Club> clubs = DataMapping.ListeClubs(tri: tri.Value + " " + sens.Value);
                RB_Role_Dept.Items.Clear();
                var counts =
                from c in clubs
                orderby c.cp
                group c by c.cp.Substring(0, 2).Replace("04", "06") into g
                select new { Cp = g.Key, Count = g.Count() };
                RB_Role_Dept.Items.Add(new ListItem("Tous", "") { Selected = true });
                foreach (var o in counts)
                {
                    switch (o.Cp)
                    {
                        case "06":
                            RB_Role_Dept.Items.Add(new ListItem("Alpes-Maritimes", o.Cp));
                            break;
                        case "20":
                            RB_Role_Dept.Items.Add(new ListItem("Corse", o.Cp));
                            break;
                        case "83":
                            RB_Role_Dept.Items.Add(new ListItem("Var", o.Cp));
                            break;
                        case "98":
                            RB_Role_Dept.Items.Add(new ListItem("Monaco", o.Cp));
                            break;
                    }
                }
            }

            // Custum image manager
            string filename_Img = Functions.ClearFileName(@"~/Portals/0/District/Images");
            TXT_Editor.ImageManager.ViewPaths = new string[] { filename_Img };
            TXT_Editor.ImageManager.UploadPaths = new string[] { filename_Img };
            TXT_Editor.ImageManager.DeletePaths = new string[] { filename_Img };

            // Custum document manager
            string filename_Doc = Functions.ClearFileName(@"~/Portals/0/District");
            TXT_Editor.DocumentManager.ViewPaths = new string[] { filename_Doc };
            TXT_Editor.DocumentManager.UploadPaths = new string[] { filename_Doc };
            TXT_Editor.DocumentManager.DeletePaths = new string[] { filename_Doc };


            TXT_Editor.DocumentManager.MaxUploadFileSize = 4194304;
            TXT_Editor.ImageManager.MaxUploadFileSize = 1048576;
        }
        else // Membre CLUB
        {
            //Membre m = Functions.GetCurrentMembre();
            //if (m != null)
            //{
            //    if (m.cric == 0)
            //    {

            //    }
            //    else
            //    {
                    Panel_Club.Visible = true;

                    if (IsPostBack == false)
                    {
                        List<Club> clubs = DataMapping.ListeClubs(tri: tri.Value + " " + sens.Value);
                        RB_Dept.Items.Clear();
                        var counts =
                        from c in clubs
                        orderby c.cp
                        group c by c.cp.Substring(0, 2).Replace("04", "06") into g
                        select new { Cp = g.Key, Count = g.Count() };
                        RB_Dept.Items.Add(new ListItem("Tous", "") { Selected = true });
                        foreach (var o in counts)
                        {
                            switch (o.Cp)
                            {
                                case "06":
                                    RB_Dept.Items.Add(new ListItem("Alpes-Maritimes", o.Cp));
                                    break;
                                case "20":
                                    RB_Dept.Items.Add(new ListItem("Corse", o.Cp));
                                    break;
                                case "83":
                                    RB_Dept.Items.Add(new ListItem("Var", o.Cp));
                                    break;
                                case "98":
                                    RB_Dept.Items.Add(new ListItem("Monaco", o.Cp));
                                    break;
                            }
                        }
                    }

                    string filename_Img = Functions.ClearFileName(@"~/Portals/0/Clubs/" + Functions.CurrentClub.seo + "/Images"); //Documents
                    TXT_Editor.ImageManager.ViewPaths = new string[] { filename_Img };
                    TXT_Editor.ImageManager.UploadPaths = new string[] { filename_Img };
                    TXT_Editor.ImageManager.DeletePaths = new string[] { filename_Img };

                    string filename_Doc = Functions.ClearFileName(@"~/Portals/0/Clubs/" + Functions.CurrentClub.seo + "/Documents");
                    TXT_Editor.DocumentManager.ViewPaths = new string[] { filename_Doc };
                    TXT_Editor.DocumentManager.UploadPaths = new string[] { filename_Doc };
                    TXT_Editor.DocumentManager.DeletePaths = new string[] { filename_Doc };

                    //TXT_Editor.Modules[0].Visible = false;
                    //TXT_Editor.Modules[1].Visible = false;
                    //TXT_Editor.Modules[2].Visible = false;
                    //TXT_Editor.Modules[3].Visible = false;

                    TXT_Editor.DocumentManager.MaxUploadFileSize = 4194304;
                    TXT_Editor.ImageManager.MaxUploadFileSize = 1048576;
                }
            //}
        //}

        LBL_NB_Dest.Text = "Nombre de destinataire(s) : 0";

        RefreshGrid();         
    }

    
    protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        switch (e.CommandName)
        {
            case "Sort":

                break;
            case "detail":
                GridView gv = sender as GridView;
                int index = (gv.PageIndex * gv.PageSize) + Convert.ToInt32(e.CommandArgument);
                List<Newsletter> news = gv.DataSource as List<Newsletter>;
                
                Newsletter n = news[index];
                HF_id.Value = "" + n.id;
                
                TXT_Titre.Text = "" + n.titre;
                TXT_Dt.SelectedDate = n.dt;
                TXT_Editor.Content = n.texte;
                TXT_Exp_Nom.Text = n.exp_nom;
                TXT_Exp_Email.Text = n.exp_email;
                string[] splits = n.dest.Split(new string[] { ";" }, StringSplitOptions.RemoveEmptyEntries);
                foreach(string s in splits)
                {
                    switch(s.Substring(0, 2))
                    {
                        case "R:" :
                            foreach (ListItem c in CHKList_Role.Items)
                            {
                                if (c.Value == s.Remove(0, 2))
                                {
                                    c.Selected = true;
                                }
                            }
                            break;

                        case "F:":
                            foreach (ListItem c in CHKList_Fct.Items)
                            {
                                if (c.Value == s.Remove(0, 2))
                                {
                                    c.Selected = true;
                                }
                            }
                            break;

                        case "D:":
                            string ss = s;
                            if (ss.Remove(0, 2) == "'06','04'")
                            {
                                ss = ss.Replace("'06','04'", "06");
                            }
                            ss = ss.Replace("'", "");

                            foreach (ListItem c in RB_Role_Dept.Items)
                            {
                                if (c.Value == ss.Remove(0, 2))
                                {
                                    c.Selected = true;
                                    RB_Role_Dept.SelectedIndex = RB_Role_Dept.Items.IndexOf(c);
                                }
                            }

                            foreach (ListItem c in RB_Dept.Items)
                            {
                                if (c.Value == ss.Remove(0, 2))
                                {
                                    c.Selected = true;
                                    RB_Dept.SelectedIndex = RB_Dept.Items.IndexOf(c);
                                }
                            }                            
                            break;

                        case "B:":
                            if(s.Remove(0, 2) == "Secrétaire")
                            {
                                CHK_Bureau_Secr.Checked = true;
                            }
                            else if (s.Remove(0, 2) == "Président")
                            {
                                CHK_Bureau_Pres.Checked = true;
                            }
                            break;

                        case "A:":
                            if (s.Remove(0, 2) == CHK_AR_0.Text)
                            {
                                CHK_AR_0.Checked = true;
                            }
                            else if (s.Remove(0, 2) == CHK_AR_1.Text)
                            {
                                CHK_AR_1.Checked = true;
                            }
                            break;

                        case "M:":
                            CHK_All_Membres.Checked = true;
                            break;
                    }
                }

                List<Membre> La_Liste = new List<Membre>();
                if (n.dest.Contains("R:") || n.dest.Contains("F:"))
                {
                    La_Liste = Recherche_District(out param);
                }
                else
                {
                    La_Liste = Les_Destinataires(out param);
                }
                LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
                
                switch(n.statut)
                {
                    case "N" :
                        BT_Supprimer.Visible = true;
                        Panel1.Visible = false;
                        Panel2.Visible = true;                        
                        Panel_Envoi.Visible = false;
                        Panel_Test.Visible = true;
                        Panel_Resultat_Test.Visible = false;
                        CHK_Env.Checked = false;
                        Panel_Result.Visible = false;
                        LBL_Nb_E.Text = "";
                        break;

                    default :
                        Panel1.Visible = false;
                        Panel2.Visible = false;
                        Panel_Envoi.Visible = false;
                        Panel_Result.Visible = true;
                        LBL_Nb_E.Text = "";
                        break;

                    case "P":
                        Panel1.Visible = false;
                        Panel2.Visible = false;
                        Panel_Envoi.Visible = false;
                        Panel_Result.Visible = true;
                        LBL_Result.Text = "Préparation de la newsletter pour l'envoi.";
                        LBL_Nb_E.Text = "";
                        break;

                    case "E":
                        Panel1.Visible = false;
                        Panel2.Visible = false;
                        Panel_Envoi.Visible = false;
                        Panel_Result.Visible = true;
                        string mail_exp = DataMapping.Get_Nb_Mails_by_Statut(HF_id.Value, "TE");
                        if (!string.IsNullOrEmpty(mail_exp))
                        {
                            int nb_fait = 0;
                            int.TryParse(mail_exp, out nb_fait);
                            if (nb_fait > -1)
                            {
                                double percentage = (nb_fait * 100) / La_Liste.Count();
                                LBL_Result.Text = "Envoi de la newsletter en cours. " + percentage.ToString() + "% réalisé.";
                            }
                            else
                            {
                                LBL_Result.Text = "Envoi de la newsletter en cours.";
                            }
                            LBL_Nb_E.Text = "La newsletter a été envoyée à " + mail_exp + " destinataire(s) sur les " + La_Liste.Count().ToString() + " destinataire(s) à qui elle est adressée.";
                        }
                        else
                        {
                            LBL_Result.Text = "Envoi de la newsletter en cours.";
                        }
                        break;

                    case "T":
                        Panel1.Visible = false;
                        Panel2.Visible = false;
                        Panel_Envoi.Visible = false;
                        Panel_Result.Visible = true;

                        string nb_Mail_T = DataMapping.Get_Nb_Mails_by_Statut(HF_id.Value, "T");
                        if (!string.IsNullOrEmpty(nb_Mail_T))
                        {
                            int nb_fait = 0;
                            int.TryParse(nb_Mail_T, out nb_fait);
                            if (nb_fait > 0 && nb_fait == La_Liste.Count())
                            {
                                LBL_Result.Text = "L'envoi de la newsletter est terminé.";
                                LBL_Nb_E.Text = "La newsletter a été expédiée au(x) " + nb_Mail_T + " destinataire(s).";
                            }
                            else
                            {
                                string nb_Mail_E = DataMapping.Get_Nb_Mails_by_Statut(HF_id.Value, "E");
                                LBL_Result.Text = "L'envoi de la newsletter est terminé mais a rencontré des problèmes.";
                                LBL_Nb_E.Text = "Sur les " + La_Liste.Count() + " destinataires de la newsletter, " + nb_Mail_T + " destinataire(s)  l'ont reçu et " + nb_Mail_E + " ne l'ont pas reçu.";

                                try
                                {
                                    //SqlConnection conn = new SqlConnection(Config.GetConnectionString());
                                    //conn.Open();

                                    //SqlCommand sql = new SqlCommand("select N.nim as 'NIM',N.email as 'Email',M.nom_club as 'Club', erreur as 'Erreur' from ais_newsletters_out N,ais_membres M where N.statut='E' and N.nim = M.nim and newsletter_id=@newsletter_id", conn);
                                    //sql.Parameters.AddWithValue("newsletter_id",""+HF_id.Value);
                                    //SqlDataAdapter da = new SqlDataAdapter(sql);
                                    //DataSet ds = new DataSet();
                                    //da.Fill(ds);
                                    //if (ds.Tables.Count > 0)
                                    //{
                                    //    GV_Emails_Erreur.DataSource = ds.Tables[0].DefaultView;
                                    //    GV_Emails_Erreur.DataBind();
                                    //    GV_Emails_Erreur.Visible = ds.Tables[0].Rows.Count > 0;
                                    //    LBL_Titre_E.Visible = ds.Tables[0].Rows.Count > 0;
                                    //}
                                }
                                catch (Exception ee)
                                {
                                    Functions.Error(ee);
                                }
                            }

                            try
                            {
                                SqlConnection conn = new SqlConnection(Config.GetConnectionString());
                                conn.Open();

                                SqlCommand sql = new SqlCommand("select count(*) from ais_newsletters_out N,ais_membres M where N.statut='E' and N.nim = M.nim and newsletter_id=@newsletter_id", conn);
                                sql.Parameters.AddWithValue("newsletter_id",""+HF_id.Value);
                                int nberreur = int.Parse( "" + sql.ExecuteScalar());
                                
                                sql = new SqlCommand("select count(*) from ais_newsletters_out N where N.lu!='N' and newsletter_id=@newsletter_id", conn);
                                sql.Parameters.AddWithValue("newsletter_id", "" + HF_id.Value);
                                int nblus = int.Parse( "" + sql.ExecuteScalar());

                                sql = new SqlCommand("select count(*) from ais_newsletters_out N where N.lu='N' and newsletter_id=@newsletter_id", conn);
                                sql.Parameters.AddWithValue("newsletter_id", "" + HF_id.Value);
                                int nbnonlus = int.Parse("" + sql.ExecuteScalar());
                                int total = nblus + nbnonlus;

                                LBL_NB_MSG_ERREUR.Text = nberreur + " (" + Math.Round(((float)nberreur * 100.0 / (float)total), 1) + "%)";
                                LBL_NB_MSG_LU.Text = nblus + " (" + Math.Round(((float)nblus * 100.0 / (float)total), 1) + "%)";
                                LBL_NB_MSG_NONLU.Text = nbnonlus + " (" + Math.Round(((float)nbnonlus * 100.0 / (float)total), 1) + "%)";
                              
                            }
                            catch (Exception ee)
                            {
                                Functions.Error(ee);
                            }
                        }

                        
                        break;
                }
                
                break;
        }
    }

    protected void GridView1_Sorting(object sender, GridViewSortEventArgs e)
    {
        tri.Value = "" + e.SortExpression;
        sens.Value = sens.Value == "ASC" ? sens.Value = "DESC" : sens.Value = "ASC";
        RefreshGrid();
    }

    protected void GridView1_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        if (GridView1.PageIndex == e.NewPageIndex)
        {
            e.Cancel = true;
            return;
        }
        GridView1.PageIndex = e.NewPageIndex;
        RefreshGrid();
    }

    void RefreshGrid()
    {
        List<Newsletter> news = DataMapping.ListeNewsletters(cric: Functions.CurrentCric, index: GridView1.PageIndex, max: GridView1.PageSize);
        GridView1.DataSource = news;
        GridView1.DataBind();
    }


    protected void BT_Annuler_Click(object sender, EventArgs e)
    {
        RefreshGrid();
        Panel1.Visible = true;
        Panel2.Visible = false;
        Panel_Envoi.Visible = false;
        Panel_Result.Visible = false;
    }
    protected void BT_Valider_Click(object sender, EventArgs e)
    {
        List<Membre> La_Liste = new List<Membre>();

        UserInfo ui = PortalSettings.UserInfo;
        if (ui.IsInRole("Administrateur District") == true && Functions.CurrentCric==0)
        {
            La_Liste = Recherche_District(out param);
        }
        else
        {
            La_Liste = Les_Destinataires(out param);
        }

        if (La_Liste != null)
        {
            if (La_Liste.Count > 0)
            {
                Newsletter obj = new Newsletter();
                if (HF_id.Value != "")
                {
                    obj = DataMapping.GetNewsletter(HF_id.Value);
                }
                else
                {
                    obj.statut = "N";
                    obj.dest = "";
                }
                obj.cric = Functions.CurrentCric;
                obj.dt = TXT_Dt.SelectedDate != null ? (DateTime)TXT_Dt.SelectedDate : DateTime.Now;
                obj.texte = TXT_Editor.Content + "<br />";
                obj.exp_email = TXT_Exp_Email.Text;
                obj.exp_nom = TXT_Exp_Nom.Text;


                if (System.Diagnostics.Debugger.IsAttached)
                {
                    if (obj.texte.Contains("src=\"/Portals/"))
                    {
                        obj.texte = obj.texte.Replace("src=\"/Portals/", "src=\"http://rodi1730.aisdev.net//Portals/");
                    }
                    if (obj.texte.Contains("<a href=\"/Portals/"))
                    {
                        obj.texte = obj.texte.Replace("<a href=\"/Portals/", "<a href=\"http://rodi1730.aisdev.net/Portals/");
                    }
                }
                else
                {
                    if (obj.texte.Contains("src=\"/Portals/"))
                    {
                        obj.texte = obj.texte.Replace("src=\"/Portals/", "src=\"http://" + Request.Url.Host + "/Portals/");
                    }
                    if (obj.texte.Contains("<a href=\"/Portals/"))
                    {
                        obj.texte = obj.texte.Replace("<a href=\"/Portals/", "<a href=\"http://" + Request.Url.Host + "/Portals/");
                    }
                }

                obj.titre = TXT_Titre.Text;
                obj.dest = param;
                HF_Param.Value = param;

                bool result = true;
                string guid = Guid.NewGuid().ToString();
                if (obj.id == null)
                {
                    result = DataMapping.UpdateNewsletter(obj, guid);
                }
                else
                {
                    result = DataMapping.UpdateNewsletter(obj);
                }

                if (result == false)
                {
                    return;
                }
                else
                {
                    if (string.IsNullOrEmpty(HF_id.Value))
                    {
                        HF_id.Value = guid;
                    }
                }


                RefreshGrid();
                Panel1.Visible = false;
                Panel2.Visible = false;
                Panel_Envoi.Visible = true;

                UserInfo user = PortalSettings.UserInfo;
                TBX_Email_Test.Text = user.Email;
                LBL_Nb_Env.Text = "La newsletter sera expédiée à " + La_Liste.Count + " destinataire(s).";
            }
            else
            {
                Functions.MessageBoxShow("Vous devez sélectionner au moins un destinataire", this);
            }
        }
        else
        {
            Functions.MessageBoxShow("La liste des destinataires est null", this);
        }


        
    }
   
    protected void BT_Ajouter_Click(object sender, EventArgs e)
    {       
        HF_id.Value = "";
        TXT_Exp_Email.Text = UserInfo.Email;
        TXT_Exp_Nom.Text = UserInfo.DisplayName;
        TXT_Titre.Text = "";
        TXT_Dt.SelectedDate = DateTime.Now;
        TXT_Editor.Content = "";
        CHK_Bureau_Pres.Checked = false;
        CHK_Bureau_Secr.Checked = false;
        if (RB_Dept.Items.Count > 0)
        {
            RB_Dept.SelectedIndex = 0;
        }
        CHK_All_Membres.Checked = false;
        
        foreach(ListItem i in CHKList_Role.Items)
        {
            i.Selected = false;
        }

        foreach(ListItem i in CHKList_Fct.Items)
        {
            i.Selected = false;
        }

        CHK_AR_0.Checked = false;
        CHK_AR_1.Checked = false;
        if (RB_Role_Dept.Items.Count > 0)
        {
            RB_Role_Dept.SelectedIndex = 0;
        }
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : 0";
        TBX_Email_Test.Text = "";
        Panel_Test.Visible = true;
        Panel_Resultat_Test.Visible = false;
        CHK_Env.Checked = false;
        BTN_Env.Visible = false;

        BT_Supprimer.Visible = false;

        Panel2.Visible = true;
        Panel1.Visible = false;
        Panel_Envoi.Visible = false;
        Panel_Result.Visible = false;


    }
    protected void BT_Supprimer_Click(object sender, EventArgs e)
    {
        if (!DataMapping.DeleteNewsletter(HF_id.Value))
        {
            return;
        }
        RefreshGrid();
        Panel1.Visible = true;
        Panel2.Visible = false;
    }

    #region membre CLUB
    protected void CHK_Bureau_Pres_CheckedChanged(object sender, EventArgs e)
    {
        //if(CHK_Bureau_Pres.Checked == true)
        //{
        //    string dept = "";
        //    if (RB_Dept.SelectedIndex > 0)
        //    {
        //        dept = "'" + RB_Dept.SelectedValue.Replace("06", "06','04") + "'"; // contournement du club qui est dans le 04
        //    }

        //    int annee_0 = Functions.GetAnneeRotarienne();

        //    HFD_Bureau_Pres.Value = "SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Président' AND anneerotarienne = '" + annee_0.ToString() + "'";
        //    if(!string.IsNullOrEmpty(dept))
        //    {
        //        HFD_Bureau_Pres.Value = HFD_Bureau_Pres.Value + " AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))";
        //    }
        //    else
        //    {
        //        HFD_Bureau_Pres.Value = HFD_Bureau_Pres.Value + ")";
        //    }
        //}
        //else
        //{
        //    HFD_Bureau_Pres.Value = "";
        //}

        List<Membre> La_Liste = Les_Destinataires(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }

    protected void CHK_Bureau_Secr_CheckedChanged(object sender, EventArgs e)
    {
        //if (CHK_Bureau_Secr.Checked == true)
        //{
        //    string dept = "";
        //    if (RB_Dept.SelectedIndex > 0)
        //    {
        //        dept = "'" + RB_Dept.SelectedValue.Replace("06", "06','04") + "'"; // contournement du club qui est dans le 04
        //    }

        //    int annee_0 = Functions.GetAnneeRotarienne();

        //    HFD_Bureau_Secr.Value = "SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Secrétaire' AND anneerotarienne = '" + annee_0.ToString() + "'";
        //    if (!string.IsNullOrEmpty(dept))
        //    {
        //        HFD_Bureau_Secr.Value = HFD_Bureau_Secr.Value + " AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))";
        //    }
        //    else
        //    {
        //        HFD_Bureau_Secr.Value = HFD_Bureau_Secr.Value + ")";
        //    }
        //}
        //else
        //{
        //    HFD_Bureau_Secr.Value = "";
        //}

        List<Membre> La_Liste = Les_Destinataires(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }

    protected void CHK_All_Membres_CheckedChanged(object sender, EventArgs e)
    {
        //if(CHK_All_Membres.Checked == true)
        //{
        //    HFD_All_Membres.Value = "SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE cric='" + HF_Cric.Value + "'";
        //}
        //else
        //{
        //    HFD_All_Membres.Value = "";
        //}

        List<Membre> La_Liste = Les_Destinataires(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }    

    protected void RB_Dept_SelectedIndexChanged(object sender, EventArgs e)
    {
        //string dept = "";
        //if (RB_Dept.SelectedIndex > 0)
        //{
        //    dept = "'" + RB_Dept.SelectedValue.Replace("06", "06','04") + "'"; // contournement du club qui est dans le 04
        //}

        //int annee_0 = Functions.GetAnneeRotarienne();

        //if (CHK_Bureau_Pres.Checked == true)
        //{
        //    HFD_Bureau_Pres.Value = "SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Président' AND anneerotarienne = '" + annee_0.ToString() + "'";
        //    if (!string.IsNullOrEmpty(dept))
        //    {
        //        HFD_Bureau_Pres.Value = HFD_Bureau_Pres.Value + " AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))";
        //    }
        //    else
        //    {
        //        HFD_Bureau_Pres.Value = HFD_Bureau_Pres.Value + ")";
        //    }
        //}
        //else
        //{
        //    HFD_Bureau_Pres.Value = "";
        //}

        //if (CHK_Bureau_Secr.Checked == true)
        //{            
        //    HFD_Bureau_Secr.Value = "SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Secrétaire' AND anneerotarienne = '" + annee_0.ToString() + "'";
        //    if (!string.IsNullOrEmpty(dept))
        //    {
        //        HFD_Bureau_Secr.Value = HFD_Bureau_Secr.Value + "AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))";
        //    }
        //    else
        //    {
        //        HFD_Bureau_Secr.Value = HFD_Bureau_Secr.Value + ")";
        //    }
        //}
        //else
        //{
        //    HFD_Bureau_Secr.Value = "";
        //}

        List<Membre> La_Liste = Les_Destinataires(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }

    protected List<Membre> Les_Destinataires(out string parametres)
    {
        parametres = "";
        List<Membre> La_Liste = new List<Membre>();
        List<Membre> Liste_Membres = new List<Membre>();
        List<Membre> Liste_President = new List<Membre>();
        List<Membre> Liste_Secretaire = new List<Membre>();

        string dept = "";
        if (RB_Dept.SelectedIndex > 0)
        {
            dept = "'" + RB_Dept.SelectedValue.Replace("06", "06','04") + "'"; // contournement du club qui est dans le 04
            parametres = parametres + ";D:" + dept;
        }

        int annee_0 = Functions.GetAnneeRotarienne();

        if(CHK_Bureau_Secr.Checked == true)
        {
            if (string.IsNullOrEmpty(dept))
            {
                Liste_Secretaire = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Secrétaire' AND anneerotarienne = '" + annee_0.ToString() + "')");
            }
            else
            {
                Liste_Secretaire = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Secrétaire' AND anneerotarienne = '" + annee_0.ToString() + "'  AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))");
            }

            parametres = parametres + ";B:Secrétaire";
        }

        if(CHK_Bureau_Pres.Checked == true)
        {
            if (string.IsNullOrEmpty(dept))
            {
                Liste_President = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Président' AND anneerotarienne = '" + annee_0.ToString() + "')");
            }
            else
            {
                Liste_President = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE fonction = 'Président' AND anneerotarienne = '" + annee_0.ToString() + "' AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + ")))");
            }
            parametres = parametres + ";B:Président";
        }

        if(CHK_All_Membres.Checked == true)
        {
            Liste_Membres = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE cric='" + HF_Cric.Value + "'");
            parametres = parametres + ";M:" + HF_Cric.Value;
        }

        if (Liste_Membres != null)
        {
            foreach (Membre m in Liste_Membres)
            {
                La_Liste.Add(m);
            }
        }

        if(Liste_President != null)
        {
            foreach (Membre mp in Liste_President)
            {
                if(!La_Liste.Exists(mem => mem.nim == mp.nim))
                {
                    La_Liste.Add(mp);
                }                
            }
        }

        if (Liste_Secretaire != null)
        {
            foreach (Membre ms in Liste_Secretaire)
            {
                if (!La_Liste.Exists(mem => mem.nim == ms.nim))
                {
                    La_Liste.Add(ms);
                }
            }
        }

        if (parametres.StartsWith(";"))
        {
            parametres = parametres.Remove(0, 1);
        }

        return La_Liste;
    }
    #endregion membre CLUB

    #region membre DISTRICT   
    protected void RB_Role_Dept_SelectedIndexChanged(object sender, EventArgs e)
    {
        List<Membre> La_Liste = Recherche_District( out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }

    protected void CHK_AR_1_CheckedChanged(object sender, EventArgs e)
    {
        List<Membre> La_Liste = Recherche_District(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }

    protected void CHK_AR_0_CheckedChanged(object sender, EventArgs e)
    {
        List<Membre> La_Liste = Recherche_District(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }
   
    protected List<Membre> Recherche_District(out string parametres)
    {
        parametres = "";
        List<Membre> la_Liste = new List<Membre>();
        List<Membre> la_Liste_Fonction = new List<Membre>();
        List<Membre> La_Liste_Role = new List<Membre>();

        #region extraction des critères de recherche
        List<string> Role_Select = new List<string>();
        foreach (ListItem c in CHKList_Role.Items)
        {           
                if (c.Selected == true)
                {
                    Role_Select.Add(c.Value);
                    parametres = parametres + ";R:" + c.Value;
                }
        }


        List<string> fonctions_Select = new List<string>();
        foreach (ListItem c in CHKList_Fct.Items)
        {
            if (c.Selected == true)
            {
                fonctions_Select.Add(c.Value);
                parametres = parametres + ";F:" + c.Value;
            }
        }

        List<string> AR_Select = new List<string>();
        foreach (Control c in Panel_AR.Controls)
        {
            if (c.GetType() == typeof(CheckBox)) //vérifier le casting
            {
                CheckBox chk = (CheckBox)c; //casting effectif
                if (chk.Checked == true)
                {
                    AR_Select.Add(chk.Text);
                    parametres = parametres + ";A:" + chk.Text;
                }
            }
        }

        string dept = "";
        if (RB_Role_Dept.SelectedIndex > 0)
        {
            dept = "'" + RB_Role_Dept.SelectedValue.Replace("06", "06','04") + "'"; // contournement du club qui est dans le 04
            parametres = parametres + ";D:" + dept;
        }
        #endregion extraction des critères de recherche

        #region Recherche par fonctions
        string requete = " SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE nim IN (SELECT DISTINCT nim FROM " + Const.TABLE_PREFIX + "aar WHERE ";
        if (fonctions_Select != null)
        {
            if (fonctions_Select.Count > 0)
            {
                string requete_AR = "";
                string requete_FCT = "";

                #region AR
                if (AR_Select != null)
                {
                    if (AR_Select.Count > 0)
                    {
                        if (AR_Select.Count == 1)
                        {
                            requete_AR = requete_AR + " anneerotarienne = '" + AR_Select[0] + "' ";
                        }
                        else
                        {
                            for (int i = 0; i < AR_Select.Count; i++)
                            {
                                if (i == 0)
                                {
                                    requete_AR = requete_AR + " (anneerotarienne = '" + AR_Select[i] + "' ";
                                }
                                else
                                {
                                    requete_AR = requete_AR + " OR anneerotarienne = '" + AR_Select[i] + "' ";
                                }
                            }
                            requete_AR = requete_AR + ")";
                        }
                    }
                    else //Si pas AR selectionné => année en cours sélectionné
                    {
                        int annee_0 = Functions.GetAnneeRotarienne();
                        requete_AR = requete_AR + " anneerotarienne = '" + annee_0.ToString() + "'";
                    }
                }
                else
                {
                    int annee_0 = Functions.GetAnneeRotarienne();
                    requete_AR = requete_AR + " anneerotarienne = '" + annee_0.ToString() + "'";
                }
                #endregion AR

                #region Fonction
                if (fonctions_Select.Count == 1)
                {
                    requete_FCT = requete_FCT + " AND fonction = '" + fonctions_Select[0] + "' ";
                }
                else
                {
                    for (int i = 0; i < fonctions_Select.Count; i++)
                    {
                        if (i == 0)
                        {
                            requete_FCT = requete_FCT + " AND (fonction = '" + fonctions_Select[i] + "' ";
                        }
                        else
                        {
                            requete_FCT = requete_FCT + " OR fonction = '" + fonctions_Select[i] + "' ";
                        }
                    }
                    requete_FCT = requete_FCT + ")";
                }
                #endregion Fonction

                requete = requete + requete_AR + requete_FCT + ") ";

                if(!string.IsNullOrEmpty(dept))
                {
                    requete = requete + " AND cric in (SELECT cric FROM " + Const.TABLE_PREFIX + "clubs WHERE SUBSTRING(cp, 1, 2) IN (" + dept + "))";
                }

                la_Liste_Fonction = DataMapping.GetListMembres_Mailling(requete);
            }
        }
        #endregion Recherche par fonctions

        #region Recherche par role
        if(Role_Select != null)
        {
            List<string> Liste_Email = new List<string>();
            RoleController ObjRoleController = new RoleController();
            foreach (string s in Role_Select)
            {
                var arrUsers = ObjRoleController.GetUsersByRoleName(PortalId, s);
                foreach (UserInfo u in arrUsers)
                {
                    if (!string.IsNullOrEmpty(u.Email))
                    {
                        Liste_Email.Add("'" + u.Email + "'");
                    }
                }
            }

            string ListeEmail = string.Join(",", Liste_Email);
            La_Liste_Role = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE email IN (" + ListeEmail + ") ");
        }

        //if (!string.IsNullOrEmpty(DL_Role.SelectedValue))
        //{
        //    List<string> Liste_Email = new List<string>();
        //    RoleController ObjRoleController = new RoleController();
        //    var arrUsers = ObjRoleController.GetUsersByRoleName(PortalId,DL_Role.SelectedValue);
        //    foreach(UserInfo u in arrUsers)
        //    {
        //        if (!string.IsNullOrEmpty(u.Email))
        //        {
        //            Liste_Email.Add("'" + u.Email + "'");
        //        }
        //    }
            
        //    string ListeEmail = string.Join(",", Liste_Email);
        //    La_Liste_Role = DataMapping.GetListMembres_Mailling("SELECT * FROM " + Const.TABLE_PREFIX + "membres WHERE email IN (" + ListeEmail + ") ");
        //}
        #endregion Recherche par role


        if (la_Liste_Fonction != null)
        {
            foreach (Membre m in la_Liste_Fonction)
            {
                la_Liste.Add(m);
            }
        }

        if (La_Liste_Role != null)
        {
            foreach (Membre mp in La_Liste_Role)
            {
                if (!la_Liste.Exists(mem => mem.nim == mp.nim))
                {
                    la_Liste.Add(mp);
                }
            }
        }

        if(parametres.StartsWith(";"))
        {
            parametres = parametres.Remove(0, 1);
        }
        return la_Liste;
    }

    protected void CHKList_Role_SelectedIndexChanged(object sender, EventArgs e)
    {
        List<Membre> La_Liste = Recherche_District(out param);
        LBL_NB_Dest.Text = "Nombre de destinataire(s) : " + La_Liste.Count().ToString();
    }
    #endregion membre DISTRICT

    #region Envoi
    protected void BTN_Test_Click(object sender, EventArgs e)
    {
        if(!DataMapping.Insert_Newsletter_Out(HF_id.Value, 0, TBX_Email_Test.Text, "A", ""))
        {
            Functions.MessageBoxShow("La newsletter de test n'a pas pu être envoyée.", this);
        }
        else
        {
            Panel_Test.Visible = false;
            Panel_Resultat_Test.Visible = true;
        }
    }

    protected void BTN_Env_Click(object sender, EventArgs e)
    {
         
        Newsletter obj = new Newsletter();
        if (HF_id.Value != "")
        {
            obj = DataMapping.GetNewsletter(HF_id.Value);
            obj.cric = Functions.CurrentCric;
            obj.dt = TXT_Dt.SelectedDate != null ? (DateTime)TXT_Dt.SelectedDate : DateTime.Now;
            obj.texte = TXT_Editor.Content + "<br />";
            if (System.Diagnostics.Debugger.IsAttached)
            {
                if (obj.texte.Contains("src=\"/Portals/"))
                {
                    obj.texte = obj.texte.Replace("src=\"/Portals/", "src=\"http://rodi1730.aisdev.net//Portals/");
                }
                if (obj.texte.Contains("<a href=\"/Portals/"))
                {
                    obj.texte = obj.texte.Replace("<a href=\"/Portals/", "<a href=\"http://rodi1730.aisdev.net/Portals/");
                }
            }
            else
            {
                if (obj.texte.Contains("src=\"/Portals/"))
                {
                    obj.texte = obj.texte.Replace("src=\"/Portals/", "src=\"http://" + Request.Url.Host + "/Portals/");
                }
                if (obj.texte.Contains("<a href=\"/Portals/"))
                {
                    obj.texte = obj.texte.Replace("<a href=\"/Portals/", "<a href=\"http://" + Request.Url.Host + "/Portals/");
                }
            }

            obj.titre = TXT_Titre.Text;
            obj.dest = HF_Param.Value;
            obj.statut = "P";

            if (!DataMapping.UpdateNewsletter(obj))
            {
                Functions.MessageBoxShow("Une erreur est survenue lors de la mise à jour de la newsletter", this);
            }
            else
            {
                RefreshGrid();
                Panel1.Visible = true;
                Panel2.Visible = false;
                Panel_Envoi.Visible = false;
            }
        }        
    }

    protected void CHK_Env_CheckedChanged(object sender, EventArgs e)
    {
        if(CHK_Env.Checked ==true)
        {
            BTN_Env.Visible = true;
        }
        else
        {
            BTN_Env.Visible = false;
        }
    }
    #endregion Envoi

    protected void BTN_Result_Click(object sender, EventArgs e)
    {
        RefreshGrid();
        Panel1.Visible = true;
        Panel2.Visible = false;
        Panel_Envoi.Visible = false;
        Panel_Result.Visible = false;
    }
   
    protected void BTN_Export_Listes_Click(object sender, EventArgs e)
    {

        DataSet dslus = new DataSet();
        DataSet dsnonlus = new DataSet();
        DataSet dserreur = new DataSet();
        List<DataTable> liste = new List<DataTable>();

        SqlConnection conn = new SqlConnection(Config.GetConnectionString());            
        try
        {
            conn.Open();
            SqlCommand sql = new SqlCommand("select N.nim as 'NIM',M.nom++' '++M.prenom as 'Nom',N.email as 'Email',M.nom_club as 'Club' from ais_newsletters_out N,ais_membres M where N.lu!='N' and N.email = M.email and newsletter_id=@newsletter_id order by M.nom_club,M.nom", conn);
            sql.Parameters.AddWithValue("newsletter_id", HF_id.Value);
            SqlDataAdapter da = new SqlDataAdapter(sql);
            da.Fill(dslus);
            if (dslus.Tables.Count > 0)
            {
                dslus.Tables[0].TableName = "Lus";
                liste.Add(dslus.Tables[0]);
            }

            sql = new SqlCommand("select N.nim as 'NIM',M.nom++' '++M.prenom as 'Nom',N.email as 'Email',M.nom_club as 'Club' from ais_newsletters_out N,ais_membres M where N.lu='N' and N.email = M.email and newsletter_id=@newsletter_id order by M.nom_club,M.nom", conn);
            sql.Parameters.AddWithValue("newsletter_id", HF_id.Value);
            da = new SqlDataAdapter(sql);
            da.Fill(dsnonlus);
            if (dsnonlus.Tables.Count > 0)
            {
                dsnonlus.Tables[0].TableName = "Non lus";
                liste.Add(dsnonlus.Tables[0]);
            }

            sql = new SqlCommand("select N.nim as 'NIM',M.nom++' '++M.prenom as 'Nom',N.email as 'Email',M.nom_club as 'Club', erreur as 'Erreur' from ais_newsletters_out N,ais_membres M where N.statut='E' and N.email = M.email and newsletter_id=@newsletter_id order by M.nom_club,M.nom", conn);
            sql.Parameters.AddWithValue("newsletter_id", HF_id.Value);
            da = new SqlDataAdapter(sql);
            da.Fill(dserreur);
            if (dserreur.Tables.Count > 0)
            {
                dserreur.Tables[0].TableName = "Erreurs";
                liste.Add(dserreur.Tables[0]);
            }

        }
        catch (Exception ee)
        {
            Functions.Error(ee);
        }

        Media media = DataMapping.ExportDataTablesToXLS(liste, "Listes des messages.xls", Aspose.Cells.SaveFormat.Excel97To2003);
        string guid = Guid.NewGuid().ToString();
        Session[guid] = media;
        Response.Redirect(Const.MEDIA_DOWNLOAD_URL + "?id=" + guid);
    }
}